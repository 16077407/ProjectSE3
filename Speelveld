package game;

import java.awt.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class Speelveld extends JFrame
        implements KeyListener {

    private int aantalRijen;
    protected Vak[][] vak;
    protected Speler speler;
    private JPanel panel;
    private final int SIZE = 60;
    public int py;
    public int px;
    public int ny;
    public int nx;
    static JButton resetbutton;
    public static int sleutelwaarde;
    public static int barricadewaarde;

    public Speelveld(int aantalRijen) {
        this.aantalRijen = aantalRijen;
        this.addKeyListener(this);
        this.setFocusable(true);
        this.requestFocusInWindow();

        maakVeld();
        initComponents();
    }

    private void plaatsRij(int rij) {
        for (int i = 0; i < this.aantalRijen; i++) {
            panel.add(vak[rij][i]);
            vak[rij][i].setSize(SIZE, SIZE);
            vak[rij][i].setLocation(SIZE * i, SIZE * rij);
            vak[0][0].setBackground(Color.BLACK);
            vak[aantalRijen - 1][aantalRijen - 1].setBackground(Color.RED);
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        speler.keyPressed(e);
//        if (py < aantalRijen - 1) {
//            //    System.out.println("ny:" + ny);
//            if (e.getKeyCode() == KeyEvent.VK_DOWN) {
//                if (vak[py][px] instanceof Barricade && sleutelwaarde == barricadewaarde) {
//                    vak[py][px] = new Leeg();
//                } else if (vak[py + 1][px] instanceof Barricade && sleutelwaarde != barricadewaarde) {
//                    System.out.println("barricade");
//                } else if (vak[py + 1][px] instanceof Sleutel) {
//
//                    vak[py][px] = new Leeg();
////                    sleutelwaarde = 100;
////                    System.out.println(sleutelwaarde);
//                    vak[ny = py + 1][px].setBackground(Color.black);
//                    vak[py][px].setBackground(Color.white);
//                    py = ny;
//                    px = nx;
//                    System.out.println(vak[ny][nx]);
//
//                    // sleutelwaarde moet gegeven worden
//                } else if (vak[py + 1][px] instanceof Muur) {
//                    System.out.println("muur");
//                } else {
//                    vak[ny = py + 1][px].setBackground(Color.black);
//                    vak[py][px].setBackground(Color.white);
//                    py = ny;
//                    px = nx;
//                    System.out.println(vak[ny][nx]);
//                }
//
//            }
//        }
//        if (py > 0) {
//            if (e.getKeyCode() == KeyEvent.VK_UP) {
//                if (vak[py][px] instanceof Barricade && sleutelwaarde == barricadewaarde) {
//                    vak[py][px] = new Leeg();
//                } else if (vak[py - 1][px] instanceof Barricade && sleutelwaarde != barricadewaarde) {
//                    System.out.println("barricade");
//                } else if (vak[py - 1][px] instanceof Sleutel) {
//
//                    vak[py - 1][px] = new Leeg();
////                    sleutelwaarde = 100;
////                    System.out.println(sleutelwaarde);
//                    vak[ny = py - 1][px].setBackground(Color.black);
//                    vak[py][px].setBackground(Color.white);
//                    py = ny;
//                    px = nx;
//                    System.out.println(vak[ny][nx]);
//
//                    // sleutelwaarde moet gegeven worden
//                } else if (vak[py - 1][px] instanceof Muur) {
//                    System.out.println("muur");
//                } else {
//                    vak[ny = py - 1][px].setBackground(Color.black);
//                    vak[py][px].setBackground(Color.white);
//                    py = ny;
//                    px = nx;
//                    System.out.println(vak[ny][nx]);
//                }
////                if (vak[py - 1][px] instanceof Muur) {
////                    System.out.println("muur");
////                } else {
////                    vak[ny = py - 1][px].setBackground(Color.black);
////                    vak[py][px].setBackground(Color.white);
////                    py = ny;
////                    px = nx;
////                }
//            }
//        }
//        if (px > 0) {
//            if (e.getKeyCode() == KeyEvent.VK_LEFT) {
//                if (vak[py][px - 1] instanceof Barricade && sleutelwaarde == barricadewaarde) {
//                    vak[py][px] = new Leeg();
//
//                } else if (vak[py][px - 1] instanceof Barricade && sleutelwaarde != barricadewaarde) {
//                    System.out.println("barricade");
//                } else if (vak[py][px - 1] instanceof Sleutel) {
//
//                    vak[py][px - 1] = new Leeg();
////                    sleutelwaarde = 100;
////                    System.out.println(sleutelwaarde);
//                    vak[py][nx = px - 1].setBackground(Color.black);
//                    vak[py][px].setBackground(Color.white);
//                    py = ny;
//                    px = nx;
//                    System.out.println(vak[ny][nx]);
//
//                    // sleutelwaarde moet gegeven worden
//                } else if (vak[py][px - 1] instanceof Muur) {
//                    System.out.println("muur");
//                } else {
//                    vak[py][nx = px - 1].setBackground(Color.black);
//                    vak[py][px].setBackground(Color.white);
//                    py = ny;
//                    px = nx;
//                    System.out.println(vak[ny][nx]);
//                }
////                if (vak[py][px - 1] instanceof Muur) {
////                    System.out.println("muur");
////                } else {
////                    vak[py][nx = px - 1].setBackground(Color.black);
////                    vak[py][px].setBackground(Color.white);
////                    py = ny;
////                    px = nx;
////                }
//            }
//        }
//        if (px <= aantalRijen - 2) {
//            if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
//                                if (vak[py][px + 1] instanceof Barricade && sleutelwaarde == barricadewaarde) {
//                    vak[py][px] = new Leeg();
//
//                } else if (vak[py][px + 1] instanceof Barricade && sleutelwaarde != barricadewaarde) {
//                    System.out.println("barricade");
//                } else if (vak[py][px + 1] instanceof Sleutel) {
//
//                    vak[py][px + 1] = new Leeg();
////                    sleutelwaarde = 100;
////                    System.out.println(sleutelwaarde);
//                    vak[py][nx = px + 1].setBackground(Color.black);
//                    vak[py][px].setBackground(Color.white);
//                    py = ny;
//                    px = nx;
//                    System.out.println(vak[ny][nx]);
//
//                    // sleutelwaarde moet gegeven worden
//                } else if (vak[py][px + 1] instanceof Muur) {
//                    System.out.println("muur");
//                } else {
//                    vak[py][nx = px + 1].setBackground(Color.black);
//                    vak[py][px].setBackground(Color.white);
//                    py = ny;
//                    px = nx;
//                    System.out.println(vak[ny][nx]);
//                }
////                if (vak[py][px + 1] instanceof Muur) {
////                    System.out.println("muur");
////                } else {
////                    vak[py][px].setBackground(Color.white);
////                    vak[py][nx = px + 1].setBackground(Color.black);
////                    py = ny;
////                    px = nx;
////                }
//            }
//        }

//        checkGewonnen();
//        repaint();
    }

    public boolean checkGewonnen() {
        if (nx == aantalRijen - 1 && ny == aantalRijen - 1) {
            JOptionPane.showMessageDialog(this, "Gefeliciteerd, u heeft gewonnen!");
        }
        return true;
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    private void initComponents() {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setName("Sleutel Barricade");
        this.setSize(800, 800);
        panel = new JPanel();
        panel.setLayout(null);
        this.add(panel);
        resetbutton = new JButton("reset");
        resetbutton.setSize(100, SIZE);
        resetbutton.setLocation(0, 600);
        panel.add(resetbutton);
        resetbutton.addActionListener(new ClickListener());

        for (int i = 0; i < this.aantalRijen; i++) {
            plaatsRij(i);
        }
    }

    /**
     * hier wordt het veld aangemaakt
     */
//    private void zetElementen(int rij, int kolom) {
//        Vak v;
//        if (rij == 2 && kolom == 1) {
//            v = new Sleutel(100);
//        } else if ((rij == 4 && kolom == aantalRijen - 1) && (rij == 7 && kolom == 8)) {
//            v = new Barricade(100);
//        } else if (rij == 4 && kolom >= 0 && kolom < aantalRijen - 1) {
//            v = new Muur();
//        } else {
//            v = new Leeg();
//        }
//        vak[rij][kolom] = v;
//    }
    private void zetBarricade() {
        vak[4][9] = new Barricade(100);
        vak[9][6] = new Barricade(100);
    }

    private void zetSleutel() {
        vak[2][2] = new Sleutel(100);
        vak[6][6] = new Sleutel(100);
    }

    private void zetMuur() {
        for (int i = 0; i < aantalRijen - 1; i++) {
            vak[4][i] = new Muur();
        }
        for (int j = 6; j < aantalRijen; j++) {
            vak[7][j] = new Muur();
        }
        vak[8][6] = new Muur();
    }

    private void maakVeld() {
        vak = new Vak[aantalRijen][aantalRijen];
        for (int rij = 0; rij < aantalRijen; rij++) {
            for (int kolom = 0; kolom < aantalRijen; kolom++) {
                Vak v = new Leeg();
//                zetElementen(kolom, rij);
                zetSleutel();
                zetBarricade();
                zetMuur();
                vak[rij][kolom] = v;
            }
        }

    }

    private static class ClickListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("hallo");
        }

    }

    public static void main(String[] args) {
        Speelveld veld = new Speelveld(10);
        Speler speler = new Speler(10);
        Sleutel sleutel = new Sleutel(100);
        Sleutel sleutel1 = new Sleutel(100);
        Barricade barricade = new Barricade(100);

        sleutelwaarde = sleutel.getSleutelwaarde();
        barricadewaarde = barricade.getBarricadewaarde();
        veld.setVisible(true);
    }

}
